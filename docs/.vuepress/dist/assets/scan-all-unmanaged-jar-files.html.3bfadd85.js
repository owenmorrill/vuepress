import{r as s,o as t,c as o,b as n,a as i,w as r,F as l,d as e,e as c}from"./app.922d555a.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const d={},u=n("h1",{id:"scan-all-unmanaged-jar-files",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scan-all-unmanaged-jar-files","aria-hidden":"true"},"#"),e(" Scan all unmanaged JAR files")],-1),h=e("The Snyk CLI can scan unmanaged JAR files in "),f=e("Java applications"),g=e(". The CLI identifies the package name, version, and vulnerabilities only if the local JAR file hash matches the Maven Central JAR file hash."),m=c(`<p>Java apps typically have JAR files in a number of locations within an application. To avoid problems from scanning multiple JAR files in the same folder, scan individual JAR files, especially for old Java apps that use Ant.</p><p><strong>WAR file support</strong>: You can scan individual WAR files that are published in Maven Central. To scan open-source dependency JARs directly, you must extract (unzip) all other WAR files or JAR files containing other JARs.</p><p><strong>Prerequisite:</strong> Scanning individual files requires <strong>Maven 3.1.0</strong> or newer to be installed alongside the Snyk CLI, which requires <strong>maven-dependency-plugin 2.2</strong> or higher.</p><p>To view the versions of Maven and the maven-dependency-plugin run <code>mvn -v</code>.</p><p>BREAKING ALL THE IMAGES <a href="../../.gitbook/assets/untitled__1_.png">Screenshot of output from mvn -v</a></p><p>Use the <code>snyk test --scan-all-unmanaged</code> command to scan all JAR files in a single folder to match any dependencies hosted on Maven central. Scanning all unmanaged files may lead to dependency conflicts if an application was not built using a package manager like Gradle or Maven. This is especially true for applications built using Ant.</p><p>Therefore test each JAR file individually using <code>snyk test --scan-unmanaged \u2014file=/path/to/file</code>. Testing each JAR file individually also has the benefit of showing the name of the JAR file that was scanned on the Snyk web UI; running a scan using --<code>scan-all-unmanaged</code> does not show the file. A simple wrapper is required in order to find and test JAR files in all sub-folders of an application. Results can then be grouped in the Snyk UI by using the --<code>remote-repo-url=AppName</code> option for <code>snyk test</code>.</p><p>The following is a Linux/Mac BASH script that iterates through all subfolders starting with the current folder and tests each individual JAR file. The <strong>PROJECT_NAME_HERE</strong> in --<strong>remote-repo-url</strong> is important; it combines multiple scan results under a single Snyk project in the UI.</p><p><code>find . -type f -name &#39;*.jar&#39; | uniq | xargs -I {} snyk monitor --file={} --scan-unmanaged --remote-repo-url=PROJECT_NAME_HERE</code></p><p>The following is a Windows batch script, run from a <strong>scanjar.bat</strong> file.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>REM Usage:    
REM For example: scanjar.bat &quot;C:\\workspace\\app&quot; &quot;myapp&quot; 
SET workspace=%1 
SET appname=%2 
for /R %workspace% %%f in (*.jar) do cmd /c snyk monitor --scan-unmanaged --remote-repo-url=%appname% --file=%%f
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The following shows the end result in the Snyk UI for an app with the --<strong>remote-repo-url=econnect</strong></p><p>BREAKING ALL THE IMAGES <a href="../../.gitbook/assets/untitled.png">Result of scanning unmanaged JAR files</a></p>`,13);function v(A,b){const a=s("RouterLink");return t(),o(l,null,[u,n("p",null,[h,i(a,{to:"/products/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven.html"},{default:r(()=>[f]),_:1}),g]),m],64)}var _=p(d,[["render",v]]);export{_ as default};
