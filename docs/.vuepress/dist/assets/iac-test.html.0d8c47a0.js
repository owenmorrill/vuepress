import{r as n,o as i,c as s,b as t,a,F as c,e as r,d as e}from"./app.922d555a.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const l={},h=r('<h1 id="iac-test" tabindex="-1"><a class="header-anchor" href="#iac-test" aria-hidden="true">#</a> IAC test</h1><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>snyk iac test [&lt;OPTIONS&gt;] [&lt;PATH&gt;]</code></p><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>The <code>snyk iac test</code> command tests for any known security issue.</p>',5),p=e("See also the help for "),u={href:"https://docs.snyk.io/snyk-cli/commands/iac-describe",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"iac describe",-1),m=e(" and "),g={href:"https://docs.snyk.io/snyk-cli/commands/iac-gen-driftignore",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"iac-gendriftignore",-1),_=e("``"),y=e("For more information see "),x={href:"https://docs.snyk.io/products/snyk-infrastructure-as-code/snyk-cli-for-infrastructure-as-code",target:"_blank",rel:"noopener noreferrer"},k=e("Snyk CLI for Infrastructure as Code"),v=e("."),j=r('<h2 id="exit-codes" tabindex="-1"><a class="header-anchor" href="#exit-codes" aria-hidden="true">#</a> Exit codes</h2><p>Possible exit codes and their meaning:</p><p><strong>0</strong>: success, no vulnerabilities found<br><strong>1</strong>: action_needed, vulnerabilities found<br><strong>2</strong>: failure, try to re-run command<br><strong>3</strong>: failure, no supported projects detected</p><h2 id="configure-the-snyk-cli" tabindex="-1"><a class="header-anchor" href="#configure-the-snyk-cli" aria-hidden="true">#</a> Configure the Snyk CLI</h2>',4),T=e("You can use environment variables to configure the Snyk CLI and also set variables to configure the Snyk CLI to connect with the Snyk API. See "),I={href:"https://docs.snyk.io/snyk-cli/configure-the-snyk-cli",target:"_blank",rel:"noopener noreferrer"},S=e("Configure the Snyk CLI"),w=e("."),E=r('<h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>Use the <code>-d</code> option to output the debug logs.</p><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><h3 id="detection-depth-depth" tabindex="-1"><a class="header-anchor" href="#detection-depth-depth" aria-hidden="true">#</a> <code>--detection-depth=&lt;DEPTH&gt;</code></h3><p>Use to indicate how many sub-directories to search. <code>DEPTH</code> must be a number.</p><p>Default: no limit.</p><p>Example: <code>--detection-depth=3</code> limits search to the specified directory (or the current directory if no <code>&lt;PATH&gt;</code> is specified) plus three levels of subdirectories.</p><h3 id="org-org-id" tabindex="-1"><a class="header-anchor" href="#org-org-id" aria-hidden="true">#</a> <code>--org=&lt;ORG_ID&gt;</code></h3><p>Specify the <code>&lt;ORG_ID&gt;</code> to run Snyk commands tied to a specific organization. The <code>&lt;ORG_ID&gt;</code> influences private test limits.</p><p>If you have multiple organizations, you can set a default from the CLI using:</p><p><code>$ snyk config set org=&lt;ORG_ID&gt;</code></p><p>Set a default to ensure all newly tested projects are tested under your default organization. If you need to override the default, use the <code>--org=&lt;ORG_ID&gt;</code> option.</p>',12),C=e("Default: "),A=t("code",null,"<ORG_ID>",-1),L=e(" that is the current preferred organization in your "),O={href:"https://app.snyk.io/account",target:"_blank",rel:"noopener noreferrer"},R=e("Account settings"),N=e("."),P=e("For more information see the article "),F={href:"https://support.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI",target:"_blank",rel:"noopener noreferrer"},D=e("How to select the organization to use in the CLI"),U=e("."),$=r('<h3 id="ignore-policy" tabindex="-1"><a class="header-anchor" href="#ignore-policy" aria-hidden="true">#</a> <code>--ignore-policy</code></h3><p>Ignore all set policies, the current policy in the <code>.snyk</code> file, Org level ignores, and the project policy on snyk.io.</p><h3 id="policy-path-path-to-policy-file" tabindex="-1"><a class="header-anchor" href="#policy-path-path-to-policy-file" aria-hidden="true">#</a> <code>--policy-path=&lt;PATH_TO_POLICY_FILE&gt;</code></h3><p>Manually pass a path to a <code>.snyk</code> policy file.</p><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> <code>--json</code></h3><p>Print results in JSON format.</p><p>Example: <code>$ snyk iac test --json-file-output=vuln.json</code></p><h3 id="json-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#json-file-output-output-file-path" aria-hidden="true">#</a> <code>--json-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in JSON format directly to the specified file, regardless of whether or not you use the <code>--json</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the JSON format output to a file.</p><h3 id="sarif" tabindex="-1"><a class="header-anchor" href="#sarif" aria-hidden="true">#</a> <code>--sarif</code></h3><p>Return results in SARIF format.</p><h3 id="sarif-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#sarif-file-output-output-file-path" aria-hidden="true">#</a> <code>--sarif-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in SARIF format directly to the &lt;OUTPUT_FILE_PATH&gt; file, regardless of whether or not you use the <code>--sarif</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the SARIF format output to a file.</p><h3 id="project-business-criticality-business-criticality-business-criticality" tabindex="-1"><a class="header-anchor" href="#project-business-criticality-business-criticality-business-criticality" aria-hidden="true">#</a> <code>--project-business-criticality=&lt;BUSINESS_CRITICALITY&gt;[,&lt;BUSINESS_CRITICALITY&gt;]...&gt;</code></h3><p>This can be used in combination with the <code>--report</code> option.</p><p>Set the project business criticality project attribute to one or more values (comma-separated). To clear the project business criticality set <code>--project-business-criticality=</code>.</p><p>Allowed values: <code>critical, high, medium, low</code></p>',19),G=e("For more information see "),H={href:"https://docs.snyk.io/getting-started/introduction-to-snyk-projects/view-project-information/project-attributes",target:"_blank",rel:"noopener noreferrer"},z=e("Project attributes"),M=e("."),q=r('<h3 id="project-environment-environment-environment" tabindex="-1"><a class="header-anchor" href="#project-environment-environment-environment" aria-hidden="true">#</a> <code>--project-environment=&lt;ENVIRONMENT&gt;[,&lt;ENVIRONMENT&gt;]...&gt;</code></h3><p>This can be used in combination with the <code>--report</code> command.</p><p>Set the project environment project attribute to one or more values (comma-separated). To clear the project environment set <code>--project-environment=</code>.</p><p>Allowed values: <code>frontend, backend, internal, external, mobile, saas, onprem, hosted, distributed</code></p>',4),B=e("For more information see "),V={href:"https://docs.snyk.io/getting-started/introduction-to-snyk-projects/view-project-information/project-attributes",target:"_blank",rel:"noopener noreferrer"},Y=e("Project attributes"),J=e("."),K=r('<h3 id="project-lifecycle-lifecycle-lifecycle" tabindex="-1"><a class="header-anchor" href="#project-lifecycle-lifecycle-lifecycle" aria-hidden="true">#</a> <code>--project-lifecycle=&lt;LIFECYCLE&gt;[,&lt;LIFECYCLE&gt;]...&gt;</code></h3><p>This can be used in combination with the <code>--report</code> command.</p><p>Set the project lifecycle project attribute to one or more values (comma-separated). To clear the project lifecycle set <code>--project-lifecycle=</code>.</p><p>Allowed values: <code>production, development, sandbox</code></p>',4),Q=e("For more information see "),W={href:"https://docs.snyk.io/getting-started/introduction-to-snyk-projects/view-project-information/project-attributes",target:"_blank",rel:"noopener noreferrer"},X=e("Project attributes"),Z=e("."),ee=r('<h3 id="project-tags-tag-tag" tabindex="-1"><a class="header-anchor" href="#project-tags-tag-tag" aria-hidden="true">#</a> <code>--project-tags=&lt;TAG&gt;[,&lt;TAG&gt;]...&gt;</code></h3><p>This can be used in combination with the <code>--report</code> command.</p><p>Set the project tags to one or more values (comma-separated key value pairs with an &quot;=&quot; separator), for example, <code>--project-tags=department=finance,team=alpha</code>. To clear the project tags set <code>--project-tags=</code></p><h3 id="report" tabindex="-1"><a class="header-anchor" href="#report" aria-hidden="true">#</a> <code>--report</code></h3><p>Share results with the Snyk App.</p><p>This creates a project in your Synk account with a snapshot of the current configuration issues. After running this command, log in to the Snyk website and view your projects to see the monitor.</p><p>Example: <code>$ snyk iac test --report</code></p><p>Note: This option cannot be used in combination with the <code>--rules</code> option.</p><h3 id="rules-path-to-custom-rules-bundle" tabindex="-1"><a class="header-anchor" href="#rules-path-to-custom-rules-bundle" aria-hidden="true">#</a> <code>--rules=&lt;PATH_TO_CUSTOM_RULES_BUNDLE&gt;</code></h3>',9),te=e("Use this dedicated option for Custom Rules scanning to enable the IaC scans to use a custom rules bundle generated with the "),oe=t("code",null,"snyk-iac-rules",-1),ae=e(" SDK. See "),re={href:"https://github.com/snyk/snyk-iac-rules#readme",target:"_blank",rel:"noopener noreferrer"},ne=t("code",null,"snyk-iac-rules",-1),ie=e(" SDK"),se=e("."),ce=r(`<p>This option cannot be used if the custom rules settings were configured with the Snyk UI. Default: If the <code>--rules</code> flag is not specified, scan the configuration files using the internal Snyk rules only.</p><p>Example: <code>--rules=bundle.tar.gz</code> (Scan the configuration files using custom rules and internal Snyk rules.)</p><p>Note: This option can not be used in combination with the <code>--report</code> option.</p><h3 id="severity-threshold-low-medium-high-critical" tabindex="-1"><a class="header-anchor" href="#severity-threshold-low-medium-high-critical" aria-hidden="true">#</a> <code>--severity-threshold=&lt;low|medium|high|critical&gt;</code></h3><p>Report only vulnerabilities at the specified level or higher.</p><h3 id="scan-terraform-plan-scan-mode" tabindex="-1"><a class="header-anchor" href="#scan-terraform-plan-scan-mode" aria-hidden="true">#</a> <code>--scan=&lt;TERRAFORM_PLAN_SCAN_MODE&gt;</code></h3><p>Use this dedicated option for Terraform plan scanning modes to control whether the scan analyzes the full final state (for example, <code>planned-values</code>), or the proposed changes only (for example, <code>resource-changes</code>).</p><p>Default: If the <code>--scan</code> option is not specified, scan the proposed changes only by default. Example 1: <code>--scan=planned-values</code> (full state scan)<br> Example 2: <code>--scan=resource-changes</code> (proposed changes scan)</p><h3 id="target-reference-target-reference" tabindex="-1"><a class="header-anchor" href="#target-reference-target-reference" aria-hidden="true">#</a> <code>--target-reference=&lt;TARGET_REFERENCE&gt;</code></h3><p>This can be used in combination with the <code>--report</code> command.</p><p>Specify a reference which differentiates this project, for example, a branch name or version. Projects having the same reference can be grouped based on that reference.</p><p>Example setting to the current Git branch: <code>snyk iac test myproject/ --report --target-reference=&quot;$(git branch --show-current)&quot;</code></p><p><br> Example setting to the latest Git tag : <code>snyk iac test myproject/ --report --target-reference=&quot;$(git describe --tags --abbrev=0)&quot;</code></p><h2 id="examples-for-snyk-iac-test-command" tabindex="-1"><a class="header-anchor" href="#examples-for-snyk-iac-test-command" aria-hidden="true">#</a> Examples for snyk iac test command</h2><p>For more information see Synk CLI for Infrastructure as Code.</p><h3 id="test-a-cloudformation-file" tabindex="-1"><a class="header-anchor" href="#test-a-cloudformation-file" aria-hidden="true">#</a> Test a CloudFormation file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/cloudformation_file.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-kubernetes-file" tabindex="-1"><a class="header-anchor" href="#test-a-kubernetes-file" aria-hidden="true">#</a> Test a Kubernetes file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/kubernetes_file.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-terraform-file" tabindex="-1"><a class="header-anchor" href="#test-a-terraform-file" aria-hidden="true">#</a> Test a Terraform file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/terraform_file.tf
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-terraform-plan-file" tabindex="-1"><a class="header-anchor" href="#test-a-terraform-plan-file" aria-hidden="true">#</a> Test a Terraform plan file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ terraform plan -out=tfplan.binary
$ terraform show -json tfplan.binary &gt; tf-plan.json
$ snyk iac test tf-plan.json
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="test-an-arm-file" tabindex="-1"><a class="header-anchor" href="#test-an-arm-file" aria-hidden="true">#</a> Test an ARM file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/arm_file.json
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-matching-files-in-a-directory" tabindex="-1"><a class="header-anchor" href="#test-matching-files-in-a-directory" aria-hidden="true">#</a> Test matching files in a directory</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/directory
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-matching-files-in-a-directory-using-a-local-custom-rules-bundle" tabindex="-1"><a class="header-anchor" href="#test-matching-files-in-a-directory-using-a-local-custom-rules-bundle" aria-hidden="true">#</a> Test matching files in a directory using a local custom rules bundle</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/directory --rules=bundle.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,29);function de(le,he){const o=n("ExternalLinkIcon");return i(),s(c,null,[h,t("p",null,[p,t("a",u,[f,a(o)]),m,t("a",g,[b,a(o)]),_]),t("p",null,[y,t("a",x,[k,a(o)]),v]),j,t("p",null,[T,t("a",I,[S,a(o)]),w]),E,t("p",null,[C,A,L,t("a",O,[R,a(o)]),N]),t("p",null,[P,t("a",F,[D,a(o)]),U]),$,t("p",null,[G,t("a",H,[z,a(o)]),M]),q,t("p",null,[B,t("a",V,[Y,a(o)]),J]),K,t("p",null,[Q,t("a",W,[X,a(o)]),Z]),ee,t("p",null,[te,oe,ae,t("a",re,[ne,ie,a(o)]),se]),ce],64)}var fe=d(l,[["render",de]]);export{fe as default};
