import{r as n,o as i,c as s,b as t,a,F as c,e as r,d as e}from"./app.922d555a.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const h={},p=r('<h1 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> Test</h1><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>snyk test [&lt;OPTIONS&gt;]</code></p><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>The <code>snyk test</code> command checks projects for open source vulnerabilities and license issues. The test command tries to auto-detect supported manifest files with dependencies and test those.</p><h2 id="exit-codes" tabindex="-1"><a class="header-anchor" href="#exit-codes" aria-hidden="true">#</a> Exit codes</h2><p>Possible exit codes and their meaning:</p><p><strong>0</strong>: success, no vulnerabilities found<br><strong>1</strong>: action_needed, vulnerabilities found<br><strong>2</strong>: failure, try to re-run command<br><strong>3</strong>: failure, no supported projects detected</p><h2 id="configure-the-snyk-cli" tabindex="-1"><a class="header-anchor" href="#configure-the-snyk-cli" aria-hidden="true">#</a> Configure the Snyk CLI</h2>',9),l=e("You can use environment variables to configure the Snyk CLI and also set variables to configure the Snyk CLI to connect with the Snyk API. See "),u={href:"https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli",target:"_blank",rel:"noopener noreferrer"},f=e("Configure the Snyk CLI"),g=e("."),m=r('<h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>Use the <code>-d</code> option to output the debug logs.</p><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><p>See also subsequent sections for options for specific build environments, package managers, languages, and <code>[&lt;CONTEXT-SPECIFIC OPTIONS&gt;]</code> which you specify last.</p><h3 id="all-projects" tabindex="-1"><a class="header-anchor" href="#all-projects" aria-hidden="true">#</a> <code>--all-projects</code></h3><p>Auto-detect all projects in the working directory (including Yarn workspaces).</p>',6),b=e("For more information see the article "),y={href:"https://support.snyk.io/hc/en-us/articles/360000910577-Does-the-Snyk-CLI-support-monorepos-or-multiple-manifest-files-",target:"_blank",rel:"noopener noreferrer"},_=e("Does the Snyk CLI support monorepos or multiple manifest files?"),k=e("."),x=r('<h3 id="detection-depth-depth" tabindex="-1"><a class="header-anchor" href="#detection-depth-depth" aria-hidden="true">#</a> <code>--detection-depth=&lt;DEPTH&gt;</code></h3><p>Use with <code>--all-projects</code> or <code>--yarn-workspaces</code> to indicate how many sub-directories to search. <code>DEPTH</code> must be a number.</p><p>Default: 4 (the current working directory and 3 sub-directories).</p><p>Example: <code>--detection-depth=3</code> limits search to the specified directory (or the current directory if no <code>&lt;PATH&gt;</code> is specified) plus three levels of subdirectories.</p><h3 id="exclude-directory-directory" tabindex="-1"><a class="header-anchor" href="#exclude-directory-directory" aria-hidden="true">#</a> <code>--exclude=&lt;DIRECTORY&gt;[,&lt;DIRECTORY&gt;]...&gt;</code></h3><p>Can be used with <code>--all-projects</code> and <code>--yarn-workspaces</code> to indicate sub-directories and files to exclude. Must be comma separated.</p><p>Use the <code>--exclude</code> option with <code>--detection-depth</code> to ignore directories at any depth.</p><h3 id="prune-repeated-subdependencies-p" tabindex="-1"><a class="header-anchor" href="#prune-repeated-subdependencies-p" aria-hidden="true">#</a> <code>--prune-repeated-subdependencies</code>, <code>-p</code></h3><p>Prune dependency trees, removing duplicate sub-dependencies.</p><p>Continues to find all vulnerabilities, but may not find all of the vulnerable paths.</p><h3 id="print-deps" tabindex="-1"><a class="header-anchor" href="#print-deps" aria-hidden="true">#</a> <code>--print-deps</code></h3><p>Print the dependency tree before sending it for analysis.</p><h3 id="remote-repo-url-url" tabindex="-1"><a class="header-anchor" href="#remote-repo-url-url" aria-hidden="true">#</a> <code>--remote-repo-url=&lt;URL&gt;</code></h3><p>Set or override the remote URL for the repository that you would like to monitor.</p><h3 id="dev" tabindex="-1"><a class="header-anchor" href="#dev" aria-hidden="true">#</a> <code>--dev</code></h3><p>Include development-only dependencies. Applicable only for some package managers, for example, <code>devDependencies</code> in npm or <code>:development</code> dependencies in Gemfile.</p><p>Default: scan only production dependencies.</p><h3 id="org-org-id" tabindex="-1"><a class="header-anchor" href="#org-org-id" aria-hidden="true">#</a> <code>--org=&lt;ORG_ID&gt;</code></h3><p>Specify the <code>&lt;ORG_ID&gt;</code> to run Snyk commands tied to a specific organization. The <code>&lt;ORG_ID&gt;</code> influences some features availability and private test limits.</p><p>If you have multiple organizations, you can set a default from the CLI using:</p><p><code>$ snyk config set org=&lt;ORG_ID&gt;</code></p><p>Set a default to ensure all newly tested projects are tested under your default organization. If you need to override the default, use the <code>--org=&lt;ORG_ID&gt;</code> option.</p>',22),j=e("Default: "),v=t("code",null,"<ORG_ID>",-1),w=e(" that is the current preferred organization in your "),T={href:"https://app.snyk.io/account",target:"_blank",rel:"noopener noreferrer"},I=e("Account settings"),E=e("."),S=e("For more information see the article "),O={href:"https://support.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI",target:"_blank",rel:"noopener noreferrer"},C=e("How to select the organization to use in the CLI"),A=e("."),R=r('<h3 id="file-file" tabindex="-1"><a class="header-anchor" href="#file-file" aria-hidden="true">#</a> <code>--file=&lt;FILE&gt;</code></h3><p>Specify a package file.</p><p>When testing locally or monitoring a project, you can specify the file that Snyk should inspect for package information. When the file is not specified, Snyk tries to detect the appropriate file for your project.</p><h3 id="package-manager-package-manager-name" tabindex="-1"><a class="header-anchor" href="#package-manager-package-manager-name" aria-hidden="true">#</a> <code>--package-manager=&lt;PACKAGE_MANAGER_NAME&gt;</code></h3><p>Specify the name of the package manager when the filename specified with the <code>--file=&lt;FILE&gt;</code> option is not standard. This allows Snyk to find the file.</p><p>Example: <code>$ snyk test --file=req.txt --package-manager=pip</code></p><h3 id="ignore-policy" tabindex="-1"><a class="header-anchor" href="#ignore-policy" aria-hidden="true">#</a> <code>--ignore-policy</code></h3><p>Ignore all set policies, the current policy in the <code>.snyk</code> file, Org level ignores, and the project policy on snyk.io.</p><h3 id="trust-policies" tabindex="-1"><a class="header-anchor" href="#trust-policies" aria-hidden="true">#</a> <code>--trust-policies</code></h3><p>Apply and use ignore rules from the Snyk policies your dependencies; otherwise ignore rules in the dependencies are only shown as a suggestion.</p><h3 id="show-vulnerable-paths-none-some-all" tabindex="-1"><a class="header-anchor" href="#show-vulnerable-paths-none-some-all" aria-hidden="true">#</a> <code>--show-vulnerable-paths=&lt;none|some|all&gt;</code></h3><p>Display the dependency paths from the top level dependencies down to the vulnerable packages. Does not affect output when using JSON <code>--json</code> output.</p><p>Default: <code>some</code> (a few example paths shown). <code>false</code> is an alias for <code>none</code>.</p><p>Example: <code>--show-vulnerable-paths=none</code></p><h3 id="project-name-project-name" tabindex="-1"><a class="header-anchor" href="#project-name-project-name" aria-hidden="true">#</a> <code>--project-name=&lt;PROJECT_NAME&gt;</code></h3><p>Specify a custom Snyk project name.</p><h3 id="target-reference-target-reference" tabindex="-1"><a class="header-anchor" href="#target-reference-target-reference" aria-hidden="true">#</a> <code>--target-reference=&lt;TARGET_REFERENCE&gt;</code></h3>',17),P=e("Specify a reference which differentiates this project, for example, a branch name or version. Projects having the same reference can be grouped based on that reference. Only supported for Snyk Open Source. For more information see "),D={href:"https://docs.snyk.io/snyk-cli/secure-your-projects-in-the-long-term/grouping-projects-by-branch-or-version",target:"_blank",rel:"noopener noreferrer"},N=e("Separating projects by branch or version"),F=e("."),L=r('<h3 id="policy-path-path-to-policy-file" tabindex="-1"><a class="header-anchor" href="#policy-path-path-to-policy-file" aria-hidden="true">#</a> <code>--policy-path=&lt;PATH_TO_POLICY_FILE&gt;</code></h3><p>Manually pass a path to a <code>.snyk</code> policy file.</p><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> <code>--json</code></h3><p>Print results in JSON format.</p><p>Example: <code>$ snyk test --json-file-output=vuln.json</code></p><h3 id="json-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#json-file-output-output-file-path" aria-hidden="true">#</a> <code>--json-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in JSON format directly to the specified file, regardless of whether or not you use the <code>--json</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the JSON format output to a file.</p><h3 id="sarif" tabindex="-1"><a class="header-anchor" href="#sarif" aria-hidden="true">#</a> <code>--sarif</code></h3><p>Return results in SARIF format.</p><h3 id="sarif-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#sarif-file-output-output-file-path" aria-hidden="true">#</a> <code>--sarif-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in SARIF format directly to the &lt;OUTPUT_FILE_PATH&gt; file, regardless of whether or not you use the <code>--sarif</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the SARIF format output to a file.</p><h3 id="severity-threshold-low-medium-high-critical" tabindex="-1"><a class="header-anchor" href="#severity-threshold-low-medium-high-critical" aria-hidden="true">#</a> <code>--severity-threshold=&lt;low|medium|high|critical&gt;</code></h3><p>Report only vulnerabilities at the specified level or higher.</p><h3 id="fail-on-all-upgradable-patchable" tabindex="-1"><a class="header-anchor" href="#fail-on-all-upgradable-patchable" aria-hidden="true">#</a> <code>--fail-on=&lt;all|upgradable|patchable&gt;</code></h3><p>Fail only when there are vulnerabilities that can be fixed.</p><ul><li><code>all</code>: fail when there is at least one vulnerability that can be either upgraded or patched.</li><li><code>upgradable</code>: fail when there is at least one vulnerability that can be upgraded.</li><li><code>patchable</code>: fail when there is at least one vulnerability that can be patched.</li></ul><p>If vulnerabilities do not have a fix and this option is being used, tests pass.</p><h2 id="options-for-maven-projects" tabindex="-1"><a class="header-anchor" href="#options-for-maven-projects" aria-hidden="true">#</a> Options for Maven projects</h2>',20),G=e("For more information about Maven CLI options see "),U={href:"https://docs.snyk.io/products/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven",target:"_blank",rel:"noopener noreferrer"},M=e("Snyk for Java and Kotlin"),H=e("."),z=r('<h3 id="scan-all-unmanaged" tabindex="-1"><a class="header-anchor" href="#scan-all-unmanaged" aria-hidden="true">#</a> <code>--scan-all-unmanaged</code></h3><p>Auto-detect maven jars, aars, and wars in given directory. To test individually use <code>--file=&lt;JAR_FILE_NAME&gt;</code>.</p><p><strong>Note</strong>: Custom-built jar files, even with open source dependencies, are out of scope.</p><h3 id="reachable" tabindex="-1"><a class="header-anchor" href="#reachable" aria-hidden="true">#</a> <code>--reachable</code></h3><p>Analyze your source code to find which vulnerable functions and packages are called. Cannot be used with <code>--all-projects</code>.</p><h3 id="reachable-timeout-timeout" tabindex="-1"><a class="header-anchor" href="#reachable-timeout-timeout" aria-hidden="true">#</a> <code>--reachable-timeout=&lt;TIMEOUT&gt;</code></h3><p>Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes longer than <code>&lt;TIMEOUT&gt;</code>, reachable vulnerabilities are not reported. This does not affect regular test or monitor output.</p><p>Default: 300 (5 minutes).</p><h2 id="options-for-gradle-projects" tabindex="-1"><a class="header-anchor" href="#options-for-gradle-projects" aria-hidden="true">#</a> Options for Gradle projects</h2>',9),J=e("For more information about Gradle CLI options see "),Y={href:"https://docs.snyk.io/products/snyk-open-source/language-and-package-manager-support/snyk-for-java-gradle-maven",target:"_blank",rel:"noopener noreferrer"},$=e("Snyk for Java and Kotlin"),q=e("."),B=r('<h3 id="sub-project-name-gradle-sub-project-name" tabindex="-1"><a class="header-anchor" href="#sub-project-name-gradle-sub-project-name" aria-hidden="true">#</a> <code>--sub-project=&lt;NAME&gt;</code>, <code>--gradle-sub-project=&lt;NAME&gt;</code></h3><p>For Gradle &quot;multi project&quot; configurations, test a specific sub-project.</p><h3 id="all-sub-projects" tabindex="-1"><a class="header-anchor" href="#all-sub-projects" aria-hidden="true">#</a> <code>--all-sub-projects</code></h3><p>For &quot;multi project&quot; configurations, test all sub-projects.</p><h3 id="configuration-matching-configuration-regex" tabindex="-1"><a class="header-anchor" href="#configuration-matching-configuration-regex" aria-hidden="true">#</a> <code>--configuration-matching=&lt;CONFIGURATION_REGEX&gt;</code></h3><p>Resolve dependencies using only configuration(s) that match the specified Java regular expression</p><p>Example: <code>^releaseRuntimeClasspath$</code>.</p><h3 id="configuration-attributes-attribute-attribute" tabindex="-1"><a class="header-anchor" href="#configuration-attributes-attribute-attribute" aria-hidden="true">#</a> <code>--configuration-attributes=&lt;ATTRIBUTE&gt;[,&lt;ATTRIBUTE&gt;]...</code></h3><p>Select certain values of configuration attributes to install dependencies and perform dependency resolution.</p><p>Eexample: <code>buildtype:release,usage:java-runtime</code>.</p><h3 id="reachable-1" tabindex="-1"><a class="header-anchor" href="#reachable-1" aria-hidden="true">#</a> <code>--reachable</code></h3><p>Analyze your source code to find which vulnerable functions and packages are called.</p><h3 id="reachable-timeout-timeout-1" tabindex="-1"><a class="header-anchor" href="#reachable-timeout-timeout-1" aria-hidden="true">#</a> <code>--reachable-timeout=&lt;TIMEOUT&gt;</code></h3><p>Specify the amount of time (in seconds) to wait for Snyk to gather reachability data. If it takes longer than <code>&lt;TIMEOUT&gt;</code>, reachable vulnerabilities are not reported. This does not affect regular test or monitor output.</p><p>Default: 300 (5 minutes).</p><h3 id="init-script-file" tabindex="-1"><a class="header-anchor" href="#init-script-file" aria-hidden="true">#</a> <code>--init-script=&lt;FILE</code></h3><p>Use for projects that contain a Gradle initialization script.</p><h2 id="options-for-nuget-projects" tabindex="-1"><a class="header-anchor" href="#options-for-nuget-projects" aria-hidden="true">#</a> Options for NuGet projects</h2><h3 id="assets-project-name" tabindex="-1"><a class="header-anchor" href="#assets-project-name" aria-hidden="true">#</a> <code>--assets-project-name</code></h3><p>When monitoring a .NET project using NuGet <code>PackageReference</code> use the project name in project.assets.json, if found.</p><h3 id="packages-folder" tabindex="-1"><a class="header-anchor" href="#packages-folder" aria-hidden="true">#</a> <code>--packages-folder</code></h3><p>Specify a custom path to the packages folder.</p><h3 id="project-name-prefix-prefix-string" tabindex="-1"><a class="header-anchor" href="#project-name-prefix-prefix-string" aria-hidden="true">#</a> <code>--project-name-prefix=&lt;PREFIX_STRING&gt;</code></h3><p>When monitoring a .NET project, use this option to add a custom prefix to the name of files inside a project along with any desired separators.</p><p>Example: <code>snyk monitor --file=my-project.sln --project-name-prefix=my-group/</code>. </p><p>This is useful when you have multiple projects with the same name in other <code>.sln</code> files.</p><h2 id="option-for-npm-projects" tabindex="-1"><a class="header-anchor" href="#option-for-npm-projects" aria-hidden="true">#</a> Option for npm projects</h2><h3 id="strict-out-of-sync-true-false" tabindex="-1"><a class="header-anchor" href="#strict-out-of-sync-true-false" aria-hidden="true">#</a> <code>--strict-out-of-sync=true|false</code></h3><p>Control testing out-of-sync lockfiles.</p><p>Default: true</p><h2 id="options-for-yarn-projects" tabindex="-1"><a class="header-anchor" href="#options-for-yarn-projects" aria-hidden="true">#</a> Options for Yarn projects</h2><h3 id="strict-out-of-sync-true-false-1" tabindex="-1"><a class="header-anchor" href="#strict-out-of-sync-true-false-1" aria-hidden="true">#</a> <code>--strict-out-of-sync=true|false</code></h3><p>Control testing out-of-sync lockfiles.</p><p>Default: true</p><h3 id="yarn-workspaces" tabindex="-1"><a class="header-anchor" href="#yarn-workspaces" aria-hidden="true">#</a> <code>--yarn-workspaces</code></h3><p>Detect and scan Yarn workspaces. You can specify how many sub-directories to search using <code>--detection-depth</code> and exclude directories and files using <code>--exclude</code>. Alternatively scan Yarn workspaces with other projects using <code>--all-projects</code>.</p><h2 id="option-for-cocoapods-projects" tabindex="-1"><a class="header-anchor" href="#option-for-cocoapods-projects" aria-hidden="true">#</a> Option for CocoaPods projects</h2><h3 id="strict-out-of-sync-true-false-2" tabindex="-1"><a class="header-anchor" href="#strict-out-of-sync-true-false-2" aria-hidden="true">#</a> <code>--strict-out-of-sync=true|false</code></h3><p>Control testing out-of-sync lockfiles.</p><p>Default: false</p><h2 id="options-for-python-projects" tabindex="-1"><a class="header-anchor" href="#options-for-python-projects" aria-hidden="true">#</a> Options for Python projects</h2><h3 id="command-command" tabindex="-1"><a class="header-anchor" href="#command-command" aria-hidden="true">#</a> <code>--command=&lt;COMMAND&gt;</code></h3><p>Indicate which specific Python commands to use based on Python version. The default is <code>python</code> which executes your default python version. Run &#39;python -V&#39; to find out what version it is. If you are using multiple Python versions, use this parameter to specify the correct Python command for execution.</p><p>Default: <code>python</code> Example: <code>--command=python3</code></p><h3 id="skip-unresolved-true-false" tabindex="-1"><a class="header-anchor" href="#skip-unresolved-true-false" aria-hidden="true">#</a> <code>--skip-unresolved=true|false</code></h3><p>Allow skipping packages that are not found in the environment.</p><h2 id="options-for-go-projects" tabindex="-1"><a class="header-anchor" href="#options-for-go-projects" aria-hidden="true">#</a> Options for Go projects</h2><p>Currently the following options are not supported:</p><p><code>--fail-on=&lt;all|upgradable|patchable&gt;</code></p><h2 id="options-for-c-c-projects" tabindex="-1"><a class="header-anchor" href="#options-for-c-c-projects" aria-hidden="true">#</a> Options for C/C++ projects</h2><h3 id="unmanaged" tabindex="-1"><a class="header-anchor" href="#unmanaged" aria-hidden="true">#</a> <code>--unmanaged</code></h3><p>Scan C/C++ source code for vulnerabilities.</p>',52),V=e("For more information see "),W={href:"https://docs.snyk.io/products/snyk-open-source/language-and-package-manager-support/snyk-for-c-c++",target:"_blank",rel:"noopener noreferrer"},X=e("Snyk for C/C++"),K=e("."),Q=r('<h2 id="context-specific-options" tabindex="-1"><a class="header-anchor" href="#context-specific-options" aria-hidden="true">#</a> <code>-- [&lt;CONTEXT-SPECIFIC_OPTIONS&gt;]</code></h2><p>Use context-specific options to pass extra arguments directly to Gradle, Maven, or other build tools. These options are specified last.</p><p>Example: <code>snyk test -- --build-cache</code></p><h2 id="examples-for-the-snyk-test-command" tabindex="-1"><a class="header-anchor" href="#examples-for-the-snyk-test-command" aria-hidden="true">#</a> Examples for the snyk test command</h2><p>Test a project in the current folder for known vulnerabilities:</p><p><code>$ snyk test</code></p><p>Test a specific dependency for vulnerabilities:</p><p><code>$ snyk test ionic@1.6.5</code></p><p>Test the latest version of an npm package:</p><p><code>$ snyk test lodash</code></p><p>Test a public GitHub repository:</p><p><code>$ snyk test https://github.com/snyk-labs/nodejs-goof</code></p>',12);function Z(ee,te){const o=n("ExternalLinkIcon");return i(),s(c,null,[p,t("p",null,[l,t("a",u,[f,a(o)]),g]),m,t("p",null,[b,t("a",y,[_,a(o)]),k]),x,t("p",null,[j,v,w,t("a",T,[I,a(o)]),E]),t("p",null,[S,t("a",O,[C,a(o)]),A]),R,t("p",null,[P,t("a",D,[N,a(o)]),F]),L,t("p",null,[G,t("a",U,[M,a(o)]),H]),z,t("p",null,[J,t("a",Y,[$,a(o)]),q]),B,t("p",null,[V,t("a",W,[X,a(o)]),K]),Q],64)}var re=d(h,[["render",Z]]);export{re as default};
