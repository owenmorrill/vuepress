import{r as n,o as r,c as i,b as t,a as s,F as d,e as o,d as e}from"./app.922d555a.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const l={},h=o('<h1 id="iac" tabindex="-1"><a class="header-anchor" href="#iac" aria-hidden="true">#</a> IAC</h1><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>snyk iac &lt;SUBCOMMAND&gt; [&lt;OPTIONS&gt;] [&lt;PATH&gt;]</code></p><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>The <code>snyk iac</code> command finds security issues in Infrastructure as Code files.</p>',5),u=e("For more information see "),p={href:"https://docs.snyk.io/products/snyk-infrastructure-as-code/snyk-cli-for-infrastructure-as-code",target:"_blank",rel:"noopener noreferrer"},f=e("Synk CLI for Infrastructure as Code"),m=e("."),g=o('<h2 id="subcommand-test" tabindex="-1"><a class="header-anchor" href="#subcommand-test" aria-hidden="true">#</a> Subcommand: <code>test</code></h2><p>Test for any known issue.</p><h2 id="exit-codes" tabindex="-1"><a class="header-anchor" href="#exit-codes" aria-hidden="true">#</a> Exit codes</h2><p>Possible exit codes and their meaning:</p><p><strong>0</strong>: success, no vulnerabilities found<br><strong>1</strong>: action_needed, vulnerabilities found<br><strong>2</strong>: failure, try to re-run command<br><strong>3</strong>: failure, no supported projects detected</p><h2 id="configure-the-snyk-cli" tabindex="-1"><a class="header-anchor" href="#configure-the-snyk-cli" aria-hidden="true">#</a> Configure the Snyk CLI</h2>',6),_=e("You can use environment variables to configure the Snyk CLI and also set variables to configure the Snyk CLI to connect with the Snyk API. See "),b={href:"https://docs.snyk.io/features/snyk-cli/configure-the-snyk-cli",target:"_blank",rel:"noopener noreferrer"},y=e("Configure the Snyk CLI"),x=e("."),k=o('<h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h2><p>Use the <code>-d</code> option to output the debug logs.</p><h2 id="options-for-the-iac-test-subcommand" tabindex="-1"><a class="header-anchor" href="#options-for-the-iac-test-subcommand" aria-hidden="true">#</a> Options for the iac test subcommand</h2><h3 id="detection-depth-depth" tabindex="-1"><a class="header-anchor" href="#detection-depth-depth" aria-hidden="true">#</a> <code>--detection-depth=&lt;DEPTH&gt;</code></h3><p>Use to indicate how many sub-directories to search. <code>DEPTH</code> must be a number.</p><p>Default: no limit.</p><p>Example: <code>--detection-depth=3</code> limits search to the specified directory (or the current directory if no <code>&lt;PATH&gt;</code> is specified) plus three levels of subdirectories.</p><h3 id="org-org-id" tabindex="-1"><a class="header-anchor" href="#org-org-id" aria-hidden="true">#</a> <code>--org=&lt;ORG_ID&gt;</code></h3><p>Specify the <code>&lt;ORG_ID&gt;</code> to run Snyk commands tied to a specific organization. The <code>&lt;ORG_ID&gt;</code> influences private test limits.</p><p>If you have multiple organizations, you can set a default from the CLI using:</p><p><code>$ snyk config set org=&lt;ORG_ID&gt;</code></p><p>Set a default to ensure all newly tested projects are tested under your default organization. If you need to override the default, use the <code>--org=&lt;ORG_ID&gt;</code> option.</p>',12),v=e("Default: "),I=t("code",null,"<ORG_ID>",-1),T=e(" that is the current preferred organization in your "),S={href:"https://app.snyk.io/account",target:"_blank",rel:"noopener noreferrer"},C=e("Account settings"),O=e("."),E=t("p",null,[e("Example: "),t("code",null,"$ snyk iac test --org=my-team")],-1),w=e("For more information see the article "),D={href:"https://support.snyk.io/hc/en-us/articles/360000920738-How-to-select-the-organization-to-use-in-the-CLI",target:"_blank",rel:"noopener noreferrer"},L=e("How to select the organization to use in the CLI"),A=e("."),P=o('<h3 id="ignore-policy" tabindex="-1"><a class="header-anchor" href="#ignore-policy" aria-hidden="true">#</a> <code>--ignore-policy</code></h3><p>Ignore all set policies, the current policy in the <code>.snyk</code> file, Org level ignores, and the project policy on snyk.io.</p><h3 id="policy-path-path-to-policy-file" tabindex="-1"><a class="header-anchor" href="#policy-path-path-to-policy-file" aria-hidden="true">#</a> <code>--policy-path=&lt;PATH_TO_POLICY_FILE&gt;</code></h3><p>Manually pass a path to a <code>.snyk</code> policy file.</p><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> <code>--json</code></h3><p>Print results in JSON format.</p><p>Example: <code>$ snyk iac test --json-file-output=vuln.json</code></p><h3 id="json-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#json-file-output-output-file-path" aria-hidden="true">#</a> <code>--json-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in JSON format directly to the specified file, regardless of whether or not you use the <code>--json</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the JSON format output to a file.</p><h3 id="sarif" tabindex="-1"><a class="header-anchor" href="#sarif" aria-hidden="true">#</a> <code>--sarif</code></h3><p>Return results in SARIF format.</p><h3 id="sarif-file-output-output-file-path" tabindex="-1"><a class="header-anchor" href="#sarif-file-output-output-file-path" aria-hidden="true">#</a> <code>--sarif-file-output=&lt;OUTPUT_FILE_PATH&gt;</code></h3><p>Save test output in SARIF format directly to the &lt;OUTPUT_FILE_PATH&gt; file, regardless of whether or not you use the <code>--sarif</code> option.</p><p>This is especially useful if you want to display the human-readable test output using stdout and at the same time save the SARIF format output to a file.</p><h3 id="severity-threshold-low-medium-high-critical" tabindex="-1"><a class="header-anchor" href="#severity-threshold-low-medium-high-critical" aria-hidden="true">#</a> <code>--severity-threshold=&lt;low|medium|high|critical&gt;</code></h3><p>Report only vulnerabilities at the specified level or higher.</p><h3 id="scan-terraform-plan-scan-mode" tabindex="-1"><a class="header-anchor" href="#scan-terraform-plan-scan-mode" aria-hidden="true">#</a> <code>--scan=&lt;TERRAFORM_PLAN_SCAN_MODE&gt;</code></h3><p>Use this dedicated option for Terraform plan scanning modes to control whether the scan analyzes the full final state (for example, <code>planned-values</code>), or the proposed changes only (for example, <code>resource-changes</code>).</p><p>Default: If the <code>--scan</code> option is not specified, scan the proposed changes only by default. Example 1: <code>--scan=planned-values</code> (full state scan) Example 2: <code>--scan=resource-changes</code> (proposed changes scan)</p><h3 id="rules-path-to-custom-rules-bundle" tabindex="-1"><a class="header-anchor" href="#rules-path-to-custom-rules-bundle" aria-hidden="true">#</a> <code>--rules=&lt;PATH_TO_CUSTOM_RULES_BUNDLE&gt;</code></h3>',21),R=e("Use this dedicated option for Custom Rules scanning to enable the IaC scans to use a custom rules bundle generated with the "),j=t("code",null,"snyk-iac-rules",-1),U=e(" SDK. See "),F={href:"https://github.com/snyk/snyk-iac-rules",target:"_blank",rel:"noopener noreferrer"},N=e("Download learn how to use the SDK"),$=e("."),H=t("p",null,[e("This option cannot be used if the custom rules settings were configured with the Snyk UI. Default: If the "),t("code",null,"--rules"),e(" flag is not specified, scan the configuration files using the internal Snyk rules only.")],-1),z=t("p",null,[e("Example: "),t("code",null,"--rules=bundle.tar.gz"),e(" (Scan the configuration files using custom rules and internal Snyk rules.)")],-1),M=t("h2",{id:"examples-for-the-iac-test-subcommand",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#examples-for-the-iac-test-subcommand","aria-hidden":"true"},"#"),e(" Examples for the iac test subcommand")],-1),G=e("[For more information see "),B={href:"https://docs.snyk.io/products/snyk-infrastructure-as-code/snyk-cli-for-infrastructure-as-code",target:"_blank",rel:"noopener noreferrer"},V=e("Synk CLI for Infrastructure as Code"),J=e("."),K=o(`<h3 id="test-a-cloudformation-file" tabindex="-1"><a class="header-anchor" href="#test-a-cloudformation-file" aria-hidden="true">#</a> Test a CloudFormation file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/cloudformation_file.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-kubernetes-file" tabindex="-1"><a class="header-anchor" href="#test-a-kubernetes-file" aria-hidden="true">#</a> Test a Kubernetes file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/kubernetes_file.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-terraform-file" tabindex="-1"><a class="header-anchor" href="#test-a-terraform-file" aria-hidden="true">#</a> Test a Terraform file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/terraform_file.tf
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-a-terraform-plan-file" tabindex="-1"><a class="header-anchor" href="#test-a-terraform-plan-file" aria-hidden="true">#</a> Test a Terraform plan file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ terraform plan -out=tfplan.binary
$ terraform show -json tfplan.binary &gt; tf-plan.json
$ snyk iac test tf-plan.json
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="test-an-arm-file" tabindex="-1"><a class="header-anchor" href="#test-an-arm-file" aria-hidden="true">#</a> Test an ARM file</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/arm_file.json
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-matching-files-in-a-directory" tabindex="-1"><a class="header-anchor" href="#test-matching-files-in-a-directory" aria-hidden="true">#</a> Test matching files in a directory</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/directory
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="test-matching-files-in-a-directory-using-a-local-custom-rules-bundle" tabindex="-1"><a class="header-anchor" href="#test-matching-files-in-a-directory-using-a-local-custom-rules-bundle" aria-hidden="true">#</a> Test matching files in a directory using a local custom rules bundle</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ snyk iac test /path/to/directory --rules=bundle.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,14);function Y(q,Q){const a=n("ExternalLinkIcon");return r(),i(d,null,[h,t("p",null,[u,t("a",p,[f,s(a)]),m]),g,t("p",null,[_,t("a",b,[y,s(a)]),x]),k,t("p",null,[v,I,T,t("a",S,[C,s(a)]),O]),E,t("p",null,[w,t("a",D,[L,s(a)]),A]),P,t("p",null,[R,j,U,t("a",F,[N,s(a)]),$]),H,z,M,t("p",null,[G,t("a",B,[V,s(a)]),J]),K],64)}var Z=c(l,[["render",Y]]);export{Z as default};
